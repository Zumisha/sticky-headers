import java.text.SimpleDateFormat

// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    repositories {
        google()
        mavenCentral()
        maven { url 'https://jitpack.io' }
        maven { url 'https://developer.huawei.com/repo/' }
    }

    dependencies {
        classpath "com.android.tools.build:gradle:7.1.3"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.6.21"
        classpath "androidx.navigation:navigation-safe-args-gradle-plugin:2.4.2"
        classpath "com.google.gms:google-services:4.3.10"
    }
}

plugins {
    id 'maven-publish'
    id 'version-catalog'
}

static def isReleaseBuild(project) {
    return !project.gradle.startParameter.taskNames.any { it.toLowerCase().contains('debug') }
}

static def getArtifactFilePath(project) {
    if (isReleaseBuild(project)) {
        return "${project.buildDir}/outputs/aar/${project._artifactId}-release.aar"
    } else {
        return "${project.buildDir}/outputs/aar/${project._artifactId}-debug.aar"
    }
}

static def getPublicationName(project) {
    if (isReleaseBuild(project)) {
        return "release"
    } else {
        return "debug"
    }
}

def secretsPropertiesFile = rootProject.file("../secrets.properties")
if (secretsPropertiesFile.exists()) {
    def secretProperties = new Properties()
    // Try reading secrets from file
    secretProperties.load(new FileInputStream(secretsPropertiesFile))
    for (prop in secretProperties) {
        rootProject.ext[prop.key] = prop.value
        println(prop)
    }
}

def getProp(key) {
    return rootProject.ext.has(key) ? rootProject.ext[key] : System.getenv(key)
}

def calendar = Calendar.getInstance()
def buildDate = calendar.time
def verCode = (buildDate.time / 1000 / 10).toInteger()
def dateVerName = new SimpleDateFormat("yy.MM.dd.HH.mm", Locale.getDefault()).format(buildDate)

ext.compileSdk = 31
ext.buildTools = '33.0.0-rc2'
ext.minSdk = 24
ext.targetSdk = 31
ext.verCode = verCode
ext.dateVerName = dateVerName

allprojects {
    repositories {
        google()
        mavenCentral()
        maven { url 'https://jitpack.io' }
        maven { url 'https://developer.huawei.com/repo/' }

        maven {
            url "https://maven.pkg.github.com/zumisha/Data-Collection-Terminal"
            name = "GitHubPackages"
            credentials {
                username = getProp('GITHUB_USERID')
                password = getProp('GITHUB_ACCESS_TOKEN')
            }
        }
        repositories {
            maven {
                url "https://gitlab.example.com/api/v4/groups/androidfront/-/packages/maven"
                name "GitLab"
            }
        }

    }

    configurations.all {
        resolutionStrategy.preferProjectModules()
    }

    afterEvaluate { project ->
        if (project.hasProperty('android')) {

            task sourceJar(type: Jar) {
                from project.android.sourceSets.main.java.srcDirs
                classifier "sources"
            }

            project.apply plugin: 'maven-publish'
            project.apply plugin: 'version-catalog'

            project.android {
                compileSdkVersion rootProject.ext.compileSdk
                buildToolsVersion rootProject.ext.buildTools

                defaultConfig {
                    minSdkVersion rootProject.ext.minSdk
                    targetSdkVersion rootProject.ext.targetSdk
                    versionCode verCode
                    signingConfig signingConfigs.debug

                    vectorDrawables.useSupportLibrary = true
                    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
                }

                buildTypes {
                    debug {
                        testCoverageEnabled false
                        debuggable true
                    }
                    release {
                        testCoverageEnabled false
                        minifyEnabled false
                    }
                }

                compileOptions {
                    sourceCompatibility JavaVersion.VERSION_11
                    targetCompatibility JavaVersion.VERSION_11
                }

                kotlinOptions {
                    jvmTarget = '11'
                }

                lintOptions {
//                    checkDependencies true
                    disable 'NullSafeMutableLiveData'
                }

                buildFeatures {
                    viewBinding true
                }

                publishing {
                    singleVariant("release") {
                        withSourcesJar()
                        withJavadocJar()
                    }
                }
            }

            if (project.hasProperty('_groupId') && project.hasProperty('_artifactId')) {

                project.publishing {
                    publications {
                        "${getPublicationName(project)}"(MavenPublication) {
                            groupId project._groupId
                            artifactId project._artifactId
                            version project.android.defaultConfig.versionName
                            artifact getArtifactFilePath(project)
                            artifact sourceJar

                            // To include project dependencies
                            pom.withXml {
                                def dependencies = asNode().appendNode('dependencies')

                                configurations.api.allDependencies.each {
                                    def dependency = dependencies.appendNode('dependency')
                                    dependency.appendNode('groupId', it.group)
                                    dependency.appendNode('artifactId', it.name)
                                    dependency.appendNode('version', it.version)
                                }
                            }
                        }
                    }

                    repositories {
                        maven {
                            url "https://maven.pkg.github.com/zumisha/Data-Collection-Terminal"
                            name = "GitHubPackages"
                            credentials {
                                username = getProp('GITHUB_USERID')
                                password = getProp('GITHUB_ACCESS_TOKEN')
                            }
                        }
                        /*maven {
                            url "https://gitlab.eatmarket.ru/api/v4/projects/android-libraries/packages/maven"
                            name "GitLab"
                            credentials(HttpHeaderCredentials) {
                                name = "Job-Token"
                                value = "glpat-yJoA_Pxh7VaaeP8tQH7f"
                                //getProp('Gitlab_access_token')
                            }
                            authentication {
                                header(HttpHeaderAuthentication)
                            }
                        }*/
                    }
                }
            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}